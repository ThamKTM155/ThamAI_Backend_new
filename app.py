import os
from flask import Flask, request, jsonify, Response
from flask_cors import CORS
from dotenv import load_dotenv
from openai import OpenAI

# -------------------------
# ‚öôÔ∏è C·∫•u h√¨nh Flask + OpenAI
# -------------------------
app = Flask(__name__)
CORS(app)
load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# -------------------------
# üß≠ Route g·ªëc (ki·ªÉm tra k·∫øt n·ªëi)
# -------------------------
@app.route("/", methods=["GET"])
@app.route("/test", methods=["GET"])
def home():
    return jsonify({
        "message": "‚úÖ K·∫øt n·ªëi backend ThamAI th√†nh c√¥ng!",
        "status": "ok"
    })

# -------------------------
# üí¨ 1Ô∏è‚É£ ChatGPT - X·ª≠ l√Ω h·ªôi tho·∫°i
# -------------------------
@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.get_json()
        user_message = data.get("message", "").strip()
        if not user_message:
            return jsonify({"error": "Tin nh·∫Øn tr·ªëng."}), 400

        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "B·∫°n l√† ThamAI - tr·ª£ l√Ω ·∫£o th√¢n thi·ªán, gi·ªçng nam mi·ªÅn Nam, n√≥i chuy·ªán vui v·∫ª, l·ªãch s·ª± v√† d·ªÖ hi·ªÉu."},
                {"role": "user", "content": user_message}
            ]
        )
        reply = completion.choices[0].message.content
        return jsonify({"reply": reply})

    except Exception as e:
        print("‚ùå L·ªói chat:", e)
        return jsonify({"error": str(e)}), 500

# -------------------------
# üéôÔ∏è 2Ô∏è‚É£ Whisper - Ghi √¢m ‚Üí VƒÉn b·∫£n
# -------------------------
@app.route("/whisper", methods=["POST"])
def whisper_transcribe():
    try:
        if "file" not in request.files:
            return jsonify({"error": "Kh√¥ng c√≥ file ghi √¢m."}), 400

        audio_file = request.files["file"]
        if audio_file.filename == "":
            return jsonify({"error": "File r·ªóng."}), 400

        # ‚úÖ L∆∞u file t·∫°m ƒë·ªÉ g·ª≠i cho OpenAI
        temp_path = "temp_input.webm"
        audio_file.save(temp_path)

        print(f"üì• Nh·∫≠n file ghi √¢m: {audio_file.filename}, lo·∫°i: {audio_file.content_type}")

        with open(temp_path, "rb") as f:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=f
            )

        os.remove(temp_path)
        return jsonify({"text": transcript.text})

    except Exception as e:
        print("‚ùå L·ªói Whisper:", e)
        return jsonify({"error": str(e)}), 500

# -------------------------
# üîä 3Ô∏è‚É£ TTS - VƒÉn b·∫£n ‚Üí Gi·ªçng n√≥i
# -------------------------
@app.route("/speak", methods=["POST"])
def speak():
    try:
        data = request.get_json()
        text = data.get("text", "").strip()

        if not text:
            return jsonify({"error": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒë·ªçc."}), 400

        print(f"üîä T·∫°o gi·ªçng n√≥i cho ƒëo·∫°n: {text[:50]}...")

        speech = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",
            input=text
        )

        return Response(speech.read(), mimetype="audio/mpeg")

    except Exception as e:
        print("‚ùå L·ªói t·∫°o gi·ªçng n√≥i:", e)
        return jsonify({"error": str(e)}), 500

# -------------------------
# üöÄ Kh·ªüi ch·∫°y Flask (local)
# -------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
