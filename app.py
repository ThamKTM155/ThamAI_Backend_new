# =========================================
# üéØ ThamAI Backend - Flask Server
# Phi√™n b·∫£n: 2025-10
# M·ª•c ti√™u: Chat + Text-to-Speech + Speech-to-Text
# =========================================

from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
from dotenv import load_dotenv
import openai, os
from tempfile import NamedTemporaryFile

# --- N·∫°p bi·∫øn m√¥i tr∆∞·ªùng ---
load_dotenv()

# --- Kh·ªüi t·∫°o Flask ---
app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*"}})

# --- API Key OpenAI ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    print("‚ö†Ô∏è C·∫£nh b√°o: Ch∆∞a c√≥ API Key trong .env")
client = openai.OpenAI(api_key=OPENAI_API_KEY)


# -------------------------
# Route: Ki·ªÉm tra k·∫øt n·ªëi
# -------------------------
@app.route('/test', methods=['GET'])
def test_connection():
    return jsonify({
        "message": "‚úÖ K·∫øt n·ªëi backend ThamAI th√†nh c√¥ng!",
        "status": "ok"
    }), 200


# -------------------------
# Route: Chat (VƒÉn b·∫£n ‚Üî VƒÉn b·∫£n)
# -------------------------
@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get("message", "").strip()
        if not message:
            return jsonify({"error": "Thi·∫øu n·ªôi dung tin nh·∫Øn"}), 400

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "B·∫°n l√† tr·ª£ l√Ω th√¢n thi·ªán t√™n ThamAI, n√≥i nƒÉng nh·∫π nh√†ng, vui v·∫ª, "
                        "c√≥ th·ªÉ tr·∫£ l·ªùi b·∫±ng gi·ªçng Nam ho·∫∑c N·ªØ t√πy y√™u c·∫ßu ng∆∞·ªùi d√πng."
                    )
                },
                {"role": "user", "content": message}
            ]
        )

        reply = response.choices[0].message.content
        return jsonify({"reply": reply})

    except Exception as e:
        print("‚ùå L·ªói /chat:", e)
        return jsonify({"error": str(e)}), 500


# -------------------------
# Route: Chuy·ªÉn vƒÉn b·∫£n ‚Üí gi·ªçng n√≥i (Text ‚Üí Speech)
# -------------------------
@app.route('/speak', methods=['POST'])
def speak():
    try:
        data = request.get_json()
        text = data.get("text", "")
        if not text:
            return jsonify({"error": "Thi·∫øu n·ªôi dung vƒÉn b·∫£n"}), 400

        # ‚úÖ T·∫°o file √¢m thanh t·∫°m
        with client.audio.speech.with_streaming_response.create(
            model="gpt-4o-mini-tts",
            voice="alloy",  # c√≥ th·ªÉ ƒë·ªïi: alloy / verse / nova
            input=text
        ) as response:
            tmp = NamedTemporaryFile(delete=False, suffix=".mp3")
            response.stream_to_file(tmp.name)
            tmp.flush()
            return send_file(tmp.name, mimetype="audio/mpeg")

    except Exception as e:
        print("‚ùå L·ªói /speak:", e)
        return jsonify({"error": str(e)}), 500


# -------------------------
# Route: Chuy·ªÉn gi·ªçng n√≥i ‚Üí vƒÉn b·∫£n (Speech ‚Üí Text)
# -------------------------
@app.route('/whisper', methods=['POST'])
def whisper():
    try:
        if 'file' not in request.files:
            return jsonify({"error": "Kh√¥ng c√≥ t·ªáp √¢m thanh ƒë∆∞·ª£c g·ª≠i"}), 400

        audio_file = request.files['file']
        audio_bytes = audio_file.read()  # ‚úÖ ƒê·ªçc d·ªØ li·ªáu th√†nh bytes

        response = client.audio.transcriptions.create(
            model="gpt-4o-mini-transcribe",
            file=("audio.wav", audio_bytes)
        )

        return jsonify({"text": response.text})

    except Exception as e:
        print("‚ùå L·ªói /whisper:", e)
        return jsonify({"error": str(e)}), 500


# -------------------------
# Ch·∫°y local (t√πy ch·ªçn)
# -------------------------
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
