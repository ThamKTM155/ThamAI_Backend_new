# =========================
# üí¨ Tr·ª£ l√Ω ThamAI Backend (Flask + OpenAI)
# =========================

from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import base64
import io
from pathlib import Path

app = Flask(__name__)
CORS(app)

# --- C·∫•u h√¨nh API key ---
import os
from dotenv import load_dotenv
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# --- Route ki·ªÉm tra k·∫øt n·ªëi ---
@app.route('/test', methods=['GET'])
def test_connection():
    return jsonify({"message": "‚úÖ K·∫øt n·ªëi backend ThamAI th√†nh c√¥ng!", "status": "ok"}), 200


# --- Route tr√≤ chuy·ªán ch√≠nh ---
@app.route('/chat', methods=['POST'])
def chat():
    data = request.get_json()
    message = data.get("message", "")

    if not message:
        return jsonify({"error": "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn."}), 400

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message}]
        )
        reply = response.choices[0].message.content
        return jsonify({"reply": reply})
    except Exception as e:
        return jsonify({"error": f"L·ªói x·ª≠ l√Ω chat: {str(e)}"}), 500


# --- Route TTS: Text -> Gi·ªçng n√≥i ---
@app.route('/speak', methods=['POST'])
def speak():
    data = request.get_json()
    text = data.get("text", "")

    if not text:
        return jsonify({"error": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ ƒë·ªçc."}), 400

    try:
        # S·ª≠ d·ª•ng model TTS c·ªßa OpenAI
        tts_response = openai.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",   # alloy / verse / coral / sage
            input=text
        )

        audio_bytes = tts_response.read()
        audio_base64 = base64.b64encode(audio_bytes).decode("utf-8")

        return jsonify({"audio": audio_base64})
    except Exception as e:
        return jsonify({"error": f"L·ªói TTS: {str(e)}"}), 500


# --- Route Whisper: Ghi √¢m -> VƒÉn b·∫£n ---
@app.route('/whisper', methods=['POST'])
def whisper():
    if 'audio' not in request.files:
        return jsonify({"error": "Kh√¥ng c√≥ file ghi √¢m g·ª≠i l√™n."}), 400

    audio_file = request.files['audio']

    try:
        # Whisper API - t·ª± ƒë·ªông nh·∫≠n d·∫°ng ti·∫øng Vi·ªát
        transcript = openai.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file
        )
        return jsonify({"text": transcript.text})
    except Exception as e:
        return jsonify({"error": f"L·ªói Whisper: {str(e)}"}), 500


# --- Ch·∫°y ·ª©ng d·ª•ng ---
# -------------------------
# Route: Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i (Text ‚Üí Speech)
# -------------------------
@app.route('/speak', methods=['POST'])
def speak():
    try:
        data = request.get_json()
        text = data.get("text", "")
        if not text:
            return jsonify({"error": "Thi·∫øu n·ªôi dung vƒÉn b·∫£n"}), 400

        import openai, base64, io
        from flask import send_file
        from tempfile import NamedTemporaryFile

        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        # G·ªçi OpenAI TTS (gi·ªçng t·ª± nhi√™n)
        speech = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice="alloy",
            input=text
        )

        # Ghi ra file t·∫°m r·ªìi g·ª≠i v·ªÅ
        with NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            tmp.write(speech.read())
            tmp.flush()
            return send_file(tmp.name, mimetype="audio/mpeg")

    except Exception as e:
        return jsonify({"error": str(e)}), 500


# -------------------------
# Route: Chuy·ªÉn gi·ªçng n√≥i th√†nh vƒÉn b·∫£n (Speech ‚Üí Text)
# -------------------------
@app.route('/whisper', methods=['POST'])
def whisper():
    try:
        if 'audio' not in request.files:
            return jsonify({"error": "Kh√¥ng t√¨m th·∫•y file √¢m thanh"}), 400

        audio_file = request.files['audio']

        import openai
        client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

        # G·ªçi OpenAI Whisper ƒë·ªÉ nh·∫≠n di·ªán gi·ªçng n√≥i
        transcript = client.audio.transcriptions.create(
            model="gpt-4o-mini-transcribe",
            file=audio_file
        )

        return jsonify({"text": transcript.text})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000)
